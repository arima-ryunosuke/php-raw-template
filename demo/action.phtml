<?php
# meta template data
// @formatter:off
// using variables:
/** @var \ryunosuke\NightDragon\Template $this */
/** @var mixed $_ */
/** @var string $SiteName */
/** @var null $null */
/** @var float $float */
/** @var string $string */
/** @var string $multiline */
/** @var array $array */
/** @var \stdClass $object */
/** @var \Closure $closure */
// @formatter:on
?>
<?php $this->extend(__DIR__ . '/layout.phtml', [
    'title'    => 'PageTitle',
    'childvar' => 'ChildVar',
]) ?>

<?php $this->begin('main') ?>
<section>
    <h2>親・子コンテンツの関係</h2>
    親テンプレートに渡した変数は使えません：<?= $childvar ?? 'not defined' ?>
    parent メソッドを使用して親コンテンツを表示します。
    <?php $this->parent() ?>

    これは子供コンテンツです。
    色々変数を表示しています。
</section>

<section>
    <h2>オートエスケープ</h2>
    これはただの文字列表示です（デフォルトで html エスケープされます）：<?= "this is $string" ?>
    ショート echo タグではなく、php タグはエスケープされません：<?php echo "this is $string" ?>
    ただの php タグは改行もされません（php のデフォルトです。ショート echo タグを使うとその挙動を抑制できます）。
    これは自動エスケープの無効化です（@をつけると生出力になります）：<?= @"this is $string" ?>
</section>

<section>
    <h2>修飾子機能</h2>
    これは修飾子機能です（"|" でパイプ演算子のような挙動になります）：<?= $string | strtoupper ?>
    修飾子は繋げられるし、 $_ という特殊変数を使うと任意引数位置に適用できます：<?= $string | strtoupper ?? 'default' | str_replace('TITLE', 'subject', $_) ?>
    登録しておけば静的メソッドも呼べます：<?= $float | number ?>
    引数付きです：<?= $float | number(3) ?>

    & は基本的に | と同じですが、値が null の場合にスルーされます（ぼっち演算子みたいなものです）：<?= $null & number ?? 'default' ?>
    引数付きです：<?= $float & number(3) ?? 'default' ?>

    | と & は混在可能です：<?= $null & number | is_null | var_export ?>
</section>

<section>
    <h2>配列・オブジェクトアクセス</h2>
    これは配列のアクセスです（"->" で配列アクセスできます）：<?= $array->hoge ?>
    配列アクセスはネストできます：<?= $array->fuga->x ?>
    "?->" で nullsafe アクセスができます：<?= $array?->undefined1?->undefined2 ?? 'default' ?>
    オブジェクトもアクセスできます：<?= $object->hoge ?>
    配列とオブジェクトは混在して OK です：<?= $object->fuga->x ?>
    埋め込み構文も使えます1：<?= "prefix-{$object->fuga->x}-suffix" ?>
    埋め込み構文も使えます2：<?= "prefix-{$closure(strtolower($object->fuga->x))}-suffix" ?>
    このように ?? 演算子とも併用できます：<?= $array->undefined ?? 'default' ?>
    オブジェクトも可能できます。共にネストも出来ます：<?= $object->undefined1->undefined2 ?? 'default' | strtoupper ?>

    上記2つの機能は「配列アクセス -> 修飾子」のときのみ組み合わせ可能です：<?= $array->fuga | implode(',', $_) ?>
    右記のような順番の組み合わせはできません：<?= @"<?=" ?> $string | str_split->z <?= @"?>" ?>
</section>

<section>
    <h2>埋め込み構文</h2>
    `` の中で ${} を使用するとその中で式の展開や定数の埋め込みが可能になります。
    式の展開：<?= `this is $float / 1000 + 5:${$float / 1000 + 5}` ?>
    定数の埋め込み：<?= `ArrayObject::ARRAY_AS_PROPS:${\ArrayObject::ARRAY_AS_PROPS}` ?>
</section>

<section>
    <h2>キャプチャ・サブテンプレート</h2>
    Smarty でいう capture のような機能はありませんが、所詮素の php なので ob_ 系を使用することで簡単に模倣できます。
    <?php ob_start() ?>
    <blockquote>
        これはキャプチャー中の変数表示です：<?= $string | strtoupper ?>
    </blockquote>
    <?php $buffer = ob_get_clean() ?>
    キャプチャ結果を呼び出します。<?= @$buffer ?>

    Smarty でいう function のような機能はありませんが、所詮素の php なのでクロージャを使用することで簡単に模倣できます。
    <?php $template = function ($arg1, $arg2) { ?>
        <blockquote>
            arg1+arg2: <?= $arg1 | strtoupper ?> <?= $arg2 | strtolower ?>
        </blockquote>
    <?php } ?>
    テンプレートを引数付きで呼び出します。<?= @$template("Hello's", 'World') ?>

    上記2つの機能は利便性が高く、使用頻度もそれなりのため、 組み込みの機能として実装する予定はあります。
</section>

<section>
    <h2>カスタムタグ</h2>
    タグのコールバックを登録すると特定タグに対してコールバックが実行されます。
    例えばデフォルトでは strip タグが登録されていて、空白を除去できます（Smarty の {strip} に相当） 。
    <strip>
        このタグ内の空白はすべて除去されます。ただし、変数の中身には関与しません。
        <div
            id="stripping"
            class="hoge fuga piyo"
        >
            <?= $multiline ?>
        </div>
    </strip>
</section>

<section>
    <h2>ショートタグ</h2>
    上記の構文の一部はショートオープンタグ内でも限定的に使えます。
    これらの機能は compatibleShortTag を true にすると php 本体で short_open_tag が無効にされていても使用できます（詳細は README にて）。

    foreach でアクセス子が使える
    <? foreach ($array->fuga as $key => $value): ?>
        <?= $value ?>
    <? endforeach ?>

    if で アクセス子が使える
    <? if (empty($array->undefined)): ?>
        $object.undefined is undefined
    <? endif ?>
</section>

おまけ：所詮素の php なのであらゆる表現が可能です。
<?php foreach ($array as $key => $value): ?>
    <?php if ($key === 'hoge'): ?>
        <?php echo "$value です"; ?>
        <?php echo "ショートタグが使いたいなぁ"; ?>
    <?php endif ?>
<?php endforeach ?>

<?php $this->end() ?>
