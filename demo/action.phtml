<?php
# meta template data
// using variables:
/** @var \ryunosuke\NightDragon\Template $this */
/** @var mixed $_ */
/** @var string $string */
/** @var array $array */
/** @var \stdClass $object */
// using modifier functions:
true or define('strtoupper', \strtoupper(...[]));
true or define('upper', \Modifier::upper(...[]));
// using array keys:
true or define('hoge', 'hoge');
true or define('fuga', 'fuga');
true or define('undefined', 'undefined');
true or define('undefined1', 'undefined1');
true or define('undefined2', 'undefined2');
?>
<?php $this->extend('layout.phtml') ?>

<?php $this->begin('title') ?>title<?php $this->end() ?>

<?php $this->begin('main') ?>
<?php $this->parent() ?>
これは子供コンテンツです。
色々変数を表示しています。

これはただの文字列表示です（デフォルトで html エスケープされます）：<?= "this is $string" ?>
ショート echo タグではなく、php タグはエスケープされません：<?php echo "this is $string" ?>
ただの php タグは改行もされません（php のデフォルトです。ショート echo タグを使うとその挙動を抑制できます）。
これは自動エスケープの無効化です（@をつけると生出力になります）：<?= @"this is $string" ?>

これは修飾子機能です（"|" でパイプ演算子のような挙動になります）：<?= $string | strtoupper ?>
修飾子は繋げられるし、 $_ という特殊変数を使うと任意引数位置に適用できます：<?= $string | strtoupper | str_replace('TITLE', 'subject', $_) ?>
登録しておけば静的メソッドも呼べます：<?= $string | upper ?>

これは配列のアクセスです（"." で配列アクセスできます）：<?= $array.hoge ?>
配列アクセスはネストできます：<?= $array.fuga. 0 ?>
オブジェクトもアクセスできます：<?= $object.hoge ?>
配列とオブジェクトは混在して OK です：<?= $object.fuga. 0 ?>
このように ?? 演算子とも併用できます：<?= $array.undefined ?? 'default' ?>
オブジェクトも可能できます。共にネストも出来ます：<?= $object.undefined1.undefined2 ?? 'default' | strtoupper ?>

上記2つの機能は「配列アクセス -> 修飾子」のときのみ組み合わせ可能です：<?= $array.fuga | implode(',', $_) ?>
右記のような順番の組み合わせはできません：< ?= $string | str_split . 3 ? >

おまけ：所詮素の php なのであらゆる表現が可能です。
<?php foreach ($array as $key => $value): ?>
    <?php if ($key === 'hoge'): ?>
        <?php echo "$value です"; ?>
        <?php echo "ショートタグが使いたいなぁ"; ?>
    <?php endif ?>
<?php endforeach ?>

<?php $this->end() ?>
